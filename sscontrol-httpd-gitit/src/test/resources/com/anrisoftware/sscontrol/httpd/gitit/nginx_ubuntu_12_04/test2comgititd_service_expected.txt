#!/bin/sh
### BEGIN INIT INFO
# Provides:          gititd
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Should-Start:      $network
# Should-Stop:       $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Daemonized version of gitit.
# Description:       Starts the gitit daemon
### END INIT INFO

# Robo Bee - Auto generated
# Author: Erwin MÃ¼ller, <erwin.mueller@deventm.org>

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME1="test2_com_gititd"
PIDFILE1=/var/run/$NAME1.pid
PKGNAME="test2_com_gititd"
DESC="Gitit daemon script."
DAEMON1="/tmp/var/www/test2.com/gitit/.hsenv/cabal/bin/gitit"
DAEMON1_ARGS="-f /tmp/var/www/test2.com/gitit/gitit.conf"
DAEMON1_HOME="/tmp/var/www/test2.com/gitit"
SCRIPTNAME="/tmp/etc/init.d/test2_com_gititd"

# Read configuration variable file if it is present
[ -r /etc/default/$PKGNAME ] && . /etc/default/$PKGNAME

# Exit if the package is not installed
[ -x "$DAEMON1" ] || exit 0

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

if [ -z "$RUN_AT_STARTUP" -o "$RUN_AT_STARTUP" != "YES" ]; then
    log_warning_msg "Not starting $PKGNAME, edit /etc/default/$PKGNAME to start it."
    exit 0
fi

if [ -z "$GITIT_USER" ]; then
    log_warning_msg "Not starting $PKGNAME, GITIT_USER not set in /etc/default/$PKGNAME."
    exit 0
fi

#
# Function to verify if a pid is alive
#
is_alive() {
    pid=`cat $1` > /dev/null 2>&1
    kill -0 $pid > /dev/null 2>&1
    return $?
}

#
# Function that starts the daemon/service
#
do_start() {
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started

    is_alive $PIDFILE1
    RETVAL1="$?"

    if [ $RETVAL1 != 0 ]; then
        rm -f $PIDFILE1
        start-stop-daemon --start --background --quiet --pidfile $PIDFILE1 --make-pidfile \
            --exec $DAEMON1 --chuid $GITIT_USER --user $GITIT_USER --umask $UMASK -d $DAEMON1_HOME -- $DAEMON1_ARGS
        RETVAL1="$?"
    fi
    [ "$RETVAL1" = "0" ] || return 2
}

#
# Function that stops the daemon/service
#
do_stop() {
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --user $GITIT_USER --pidfile $PIDFILE1
    RETVAL1="$?"
    [ "$RETVAL1" = "2" ] && return 2

    rm -f $PIDFILE1

    [ "$RETVAL1" = "0" ] && return 0 || return 1
}

case "$1" in

    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME1"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;

    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME1"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;

    restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME1"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
            *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
        exit 3
        ;;
esac
