createAliasesTable(args) ::= <<
<! creates the aliases table !>
<! - args.database - !>
<! - args.mysqlCommand - !>
<! - args.aliasesTable - !>
<! - args.idField - !>
<! - args.mailField - !>
<! - args.destinationField - !>
<! - args.enabledField - !>
<args.mysqlCommand> --user=<args.database.user> --password=<args.database.password> -t \<\<'STOP'
USE <args.database.database>;
CREATE TABLE IF NOT EXISTS `<args.aliasesTable>` (
`<args.idField>` smallint(3) NOT NULL auto_increment,
`<args.mailField>` varchar(120) NOT NULL default '',
`<args.destinationField>` varchar(120) NOT NULL default '',
`<args.enabledField>` tinyint(1) NOT NULL default '1',
PRIMARY KEY (`<args.idField>`));

<createIndexIfNotExists(args.aliasesTable, args.mailField)>
\q
STOP
>>

createDomainsTable(args) ::= <<
<! creates the domains table !>
<! - args.database - !>
<! - args.mysqlCommand - !>
<! - args.domainsTable - !>
<! - args.idField - !>
<! - args.domainField - !>
<! - args.transportField - !>
<! - args.enabledField - !>
<args.mysqlCommand> --user=<args.database.user> --password=<args.database.password> -t \<\<'STOP'
USE <args.database.database>;
CREATE TABLE IF NOT EXISTS `<args.domainsTable>` (
`<args.idField>` smallint(6) NOT NULL auto_increment,
`<args.domainField>` varchar(120) NOT NULL default '',
`<args.transportField>` varchar(120) NOT NULL default 'virtual:',
`<args.enabledField>` tinyint(1) NOT NULL default '1',
PRIMARY KEY (`<args.idField>`) ) ;

<createIndexIfNotExists(args.domainsTable, args.domainField)>
\q
STOP
>>

createUsersTable(args) ::= <<
<! creates the users table !>
<! - args.database - !>
<! - args.mysqlCommand - !>
<! - args.usersTable - !>
<! - args.idField - !>
<! - args.loginField - !>
<! - args.nameField - !>
<! - args.uidField - !>
<! - args.gidField - !>
<! - args.homeField - !>
<! - args.maildirField - !>
<! - args.enabledField - !>
<! - args.changePasswordField - !>
<! - args.clearField - !>
<! - args.cryptField - !>
<! - args.quotaField - !>
<! - args.procmailrcField - !>
<! - args.spamassassinrcField - !>
<! - args.virtualUid - !>
<! - args.virtualGid - !>
<! - args.mailboxBaseDir - !>
<args.mysqlCommand> --user=<args.database.user> --password=<args.database.password> -t \<\<'STOP'
USE <args.database.database>;
CREATE TABLE IF NOT EXISTS `<args.usersTable>` (
`<args.idField>` smallint(6) NOT NULL auto_increment,
`<args.loginField>` varchar(128) NOT NULL default '',
`<args.nameField>` varchar(128) NOT NULL default '',
`<args.uidField>` smallint(5) unsigned NOT NULL default '<args.virtualUid>',
`<args.gidField>` smallint(5) unsigned NOT NULL default '<args.virtualGid>',
`<args.homeField>` varchar(255) NOT NULL default '<args.mailboxBaseDir>',
`<args.maildirField>` varchar(255) NOT NULL,
`<args.enabledField>` tinyint(3) unsigned NOT NULL default '1',
`<args.changePasswordField>` tinyint(3) unsigned NOT NULL default '1',
`<args.clearField>` varchar(128) NOT NULL default 'ChangeMe',
`<args.cryptField>` varchar(128) NOT NULL default 'sdtrusfX0Jj66',
`<args.quotaField>` varchar(255) NOT NULL default '',
`<args.procmailrcField>` varchar(128) NOT NULL default '',
`<args.spamassassinrcField>` varchar(128) NOT NULL default '',
PRIMARY KEY (`<args.idField>`));

<createIndexIfNotExists(args.usersTable, args.loginField)>
\q
STOP
>>

createIndexIfNotExists(table, column) ::= <<
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ANSI';
DROP PROCEDURE IF EXISTS create_index;
DELIMITER $$
CREATE PROCEDURE create_index()
BEGIN
    DECLARE indexexists BIGINT DEFAULT 0;
    SELECT COUNT(*) INTO indexexists FROM information_schema.statistics
        WHERE TABLE_SCHEMA = DATABASE()
        AND table_name = '<table>' AND index_name = '<column>_<table>_index';
    IF indexexists = 0 THEN
        CREATE UNIQUE INDEX `<column>_<table>_index`
        ON `<table>` (`<column>`);
    END IF;
END ;$$
DELIMITER ;
CALL create_index();
DROP PROCEDURE IF EXISTS create_index;
SET SQL_MODE=@OLD_SQL_MODE;
>>
