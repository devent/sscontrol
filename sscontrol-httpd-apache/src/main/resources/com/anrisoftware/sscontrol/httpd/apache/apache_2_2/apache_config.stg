
defaultConfiguration() ::= <<
\<Directory />
    AllowOverride None
    Order Deny,Allow
    Deny from all
\</Directory>

\<Directory /var/www/sites>
    AllowOverride None
    Order Deny,Allow
    Deny from all
\</Directory>

>>

domainsConfiguration(service) ::= <<
<trunc(service.virtualDomains):{domain | <nameVirtualHost(domain)><\n>}><last(service.virtualDomains):{domain | <nameVirtualHost(domain)>}>

>>

nameVirtualHost(domain) ::= "NameVirtualHost <domain.address>:<domain.port>"

Domain(properties, domain) ::= <<
\<VirtualHost <domain.address>:<domain.port>\>

    <domainBody(properties, domain)>

    <domain.redirects:domainRedirects(domain);separator="\n">
    <domainAlias(properties, domain)>

    <domain.auths:domainAuth(properties, domain);separator="\n">
\</VirtualHost>

>>

SslDomain(properties, domain) ::= <<
\<VirtualHost <domain.address>:<domain.port>\>

    <domainBody(properties, domain)>

    <domainCerts(properties, domain)>

    <domain.redirects:domainRedirects(domain);separator="\n">
    <domainAlias(properties, domain)>

    <domain.auths:domainAuth(properties, domain);separator="\n">
\</VirtualHost>

>>

domainBody(properties, domain) ::= <<
# domain <domain.name>
ServerName <domain.name>
DocumentRoot <properties.sitesDirectory>/<domain.siteDirectory>
\<Directory <properties.sitesDirectory>/<domain.siteDirectory>\>
    AllowOverride None
    Order allow,deny
    Allow from all
\</Directory>
>>

domainCerts(properties, domain) ::= <<
SSLEngine on
SSLCertificateFile <properties.sitesDirectory>/<domain.name>/ssl/<domain.certificationFile>
SSLCertificateKeyFile <properties.sitesDirectory>/<domain.name>/ssl/<domain.certificationKeyFile>
>>

domainRedirects(redirect, domain) ::= <<
<(redirect.class.simpleName)(redirect, domain)>
>>

RedirectHttpToHttps(redirect, domain) ::= <<
# redirect http to https
RewriteEngine On
RewriteCond %{HTTP_HOST} ^<domain.name>
RewriteRule (.*) https://<domain.name>$1 [R=301,L]

>>

RedirectToWwwHttp(redirect, domain) ::= <<
# redirect to www http
ServerAlias www.<domain.name>
RewriteEngine On
RewriteCond %{HTTP_HOST} ^<domain.namePattern>$ [NC]
RewriteRule ^(.*)$ http://www.<domain.name>$1 [L,R=301]

>>

RedirectToWwwHttps(redirect, domain) ::= <<
# redirect to www https
ServerAlias www.<domain.name>
RewriteEngine On
RewriteCond %{HTTP_HOST} ^<domain.namePattern>$ [NC]
RewriteRule ^(.*)$ https://www.<domain.name>$1 [L,R=301]

>>

domainAlias(properties, domain) ::= <<
Alias / <documentRoot(properties, domain)><domain.documentRoot>/
>>

documentRoot(properties, domain) ::= <<
<if(domain.useDomain)><properties.sitesDirectory>/<domain.useDomain>/web
<else><properties.sitesDirectory>/<domain.name>/web<endif>
>>

domainAuth(auth, properties, domain) ::= <<
# auth <auth.name>
<auth.locations:domainAuthLocation(auth, properties, domain);separator="\n">

>>

domainAuthLocation(location, auth, properties, domain) ::= <<
\<Location /<location>\>
    AuthType <if(auth.type)><auth.type><else><properties.defaultAuthType><endif>
    AuthName "<auth.name>"
    AuthDigestDomain /<auth.name>
    AuthDigestProvider <if(auth.provider)><auth.provider><else><properties.defaultAuthType><endif>
    AuthUserFile <properties.sitesDirectory>/<domain.name>/auth/<auth.name>.passwd
    AuthUserFile <properties.sitesDirectory>/<domain.name>/auth/<auth.name>.group
    <auth.requires:{requires | <(requires.class.simpleName)(requires)>};separator="\n">
\</Location>
>>

AuthRequireValidUser(require) ::= <<
Require valid-user
>>

AuthRequireGroup(require) ::= <<
Require group <require.name>
>>

groupFile(auth) ::= <<
<auth.groups: { groupp | <groupp.name>: <groupFileUser(groupp)> }>

>>

groupFileUser(groupp) ::= <%
<groupp.users: { user | <user.name>};separator=" ">
%>
