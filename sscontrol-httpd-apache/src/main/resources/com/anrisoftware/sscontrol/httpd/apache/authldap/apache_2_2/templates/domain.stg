domainAuth(args) ::= <<
<!- args.auth -!>
<!- args.location -!>
<!- args.type -!>
<!- args.satisfy -!>
<!- args.groupDn -!>
<!- auth.attributes -!>
<!- auth.host -!>
<!- auth.hostUrl -!>
<!- auth.credentials -!>
<!- auth.credentialsPassword -!>
# auth "<args.auth>"
\<Location <args.location>\>
    AuthType <args.type>
    AuthName "<args.auth>"
    <(args.type)(args)>
    AuthLDAPGroupAttribute <args.attributes.group>
    AuthLDAPGroupAttributeIsDN <if(args.attributes.dn)>on<else>off<endif>
    AuthzLDAPAuthoritative <if(args.authoritative)>on<else>off<endif>
    AuthLDAPURL <args.host>/<args.hostUrl>
    AuthLDAPBindDN "<args.credentials>"
    AuthLDAPBindPassword "<args.credentialsPassword>"
    <if(args.satisfy)>Satisfy <args.satisfy><endif>
    <requireStatements(args)>
\</Location>

>>

digest(args) ::= <<
AuthDigestProvider ldap
>>

basic(args) ::= <<
AuthBasicProvider ldap
>>

requireStatements(args) ::= <<
<limitExceptStart(args)>
<requireValids(args)>
<requireGroups(args)>
<limitExceptEnd(args)>
>>

limitExceptStart(args) ::= <%
<if(args.exceptLimits)>
\<LimitExcept <args.exceptLimits;separator=" ">>
<endif>
%>

limitExceptEnd(args) ::= <%
<if(args.exceptLimits)>
\</LimitExcept>
<endif>
%>

requireValids(args) ::= <%
<if(args.requireValids)>
<args.requireValids:{valid|<(valid)()>};separator="\n">
<endif>
%>

requireValidUser() ::= <<
Require valid-user
>>

requireGroups(args) ::= <<
Require ldap-group <args.groupDn>
>>

